package org.twocentsforthoughts.problems;

import org.twocentsforthoughts.problems.common.FibonnaciCalculator;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * <pre>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</pre>
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 *
 * @see https://projecteuler.net/problem=2
 * @author Andre
 *
 */
public class Problem002 {

    private long calculateFib(FibonnaciCalculator fibCalculator, int termNumber) {
        long termValue;
        termValue = fibCalculator.calculateTerm(termNumber);
        return termValue;
    }

    private int getNextTerm(int currentTerm) {
        currentTerm += 3;
        return currentTerm;
    }

    private boolean isUnderLimit(int limitValue, long currentValue) {
        return limitValue > currentValue;
    }

    public long sumEvenUpToLimit(int limitValue) {
        long sumResult = 0;

        FibonnaciCalculator fibCalculator = new FibonnaciCalculator();

        long value = 0;
        // Every 3rd term is even
        int term = 3;

        do {
            value = calculateFib(fibCalculator, term);

            if (isUnderLimit(limitValue, value)) {
                sumResult += value;
            }

            term = getNextTerm(term);

        } while (limitValue > value);

        return sumResult;

    }

}
